import argparse
import time
import sys
import random

COMMENT_LINE = 'Autogenerated data file'

def getRandom(args):
    return max(random.gauss(args.mean,args.stddev), 0)

###############################################################

COMMENT_CHAR = '#'
METADATA_CHAR = '!'

_parser = argparse.ArgumentParser(version='0.1',
                                 formatter_class=argparse.RawTextHelpFormatter,
                                 description='''
Generate input files for data uploader.
''')


def returnError(error):
    _parser.print_usage()
    print "\nError: %s" % error
    sys.exit(1)

###############################################################

def writeFile(f, deviceId, args):
    if COMMENT_LINE is not None:
        f.write('%s %s: files=%d columns=%d rows=%d mean=%d stddev=%d freq=%d\n' % (COMMENT_CHAR, COMMENT_LINE, args.num_files, args.num_columns, args.num_rows, args.mean, args.stddev, args.frequency))
    f.write('%s device_id: %s\n' % (METADATA_CHAR, deviceId))
    f.write('%s device_name: %s\n' % (METADATA_CHAR, deviceId))

    col = ''
    if args.include_time:
        col += 'time[n], '
    for c in range(args.num_columns):
        col += 'col-%d[n]' % ((c+1))
        if c+1 < args.num_columns:
            col += ', '

    f.write('%s columns: %s\n' % (METADATA_CHAR, col))

    for r in range(args.num_rows):
        row = ''
        if args.include_time:
            row += '%d, ' % (args.start_time + (args.frequency * r))
        for c in range(args.num_columns):
            row += '%d' % getRandom(args)
            if c+1 < args.num_columns:
                row += ', '
        f.write('%s\n' % row)


def checkArgs(args):

    if not args.filename:
        returnError("No output filename provided")
    if args.device_first < 0:
        returnError("First device # must be >= 0")
    if args.num_files <= 0:
        returnError("Number of files must be > 0")
    if args.num_rows <= 0:
        returnError("Number of rows must be > 0")
    if args.num_columns <= 0:
        returnError("Number of columns must be > 0")
    if args.start_time <= 0:
        returnError("Start time should be number of milliseconds since UNIX epoch")
    if args.frequency <= 0:
        returnError("Frequency must be > 0")

if __name__ == "__main__":

    _parser.add_argument('filename', help='output filename')
    _parser.add_argument('--device-prefix', action='store', dest='device_prefix',
                         help='device ID/name prefix', default='')
    _parser.add_argument('--device-first', action='store', dest='device_first', type=int,
                         help='first device number (default: 1)', default=1)
    _parser.add_argument('--files', action='store', dest='num_files', type=int,
                         help='number of files (default: 1)', default=1)
    _parser.add_argument('--rows', action='store', dest='num_rows', type=int,
                         help='number of rows (default: 10)', default=10)
    _parser.add_argument('--columns', action='store', dest='num_columns', type=int,
                         help='number of columns (default: 1)', default=1)
    _parser.add_argument('--mean', action='store', dest='mean', type=int,
                         help='mean of random Gaussian distribution (default: 100)', default=100)
    _parser.add_argument('--stddev', action='store', dest='stddev', type=int,
                         help='stddev of random Gaussian distribution (default: 10)', default=10)
    _parser.add_argument('--include-time', action='store_true', dest='include_time',
                         help='include time as a column (default: not included)')
    _parser.add_argument('--start-time', action='store', dest='start_time', type=int,
                         help='start time in UNIX time in milliseconds (default: now)', default=int(time.time() * 1000))
    _parser.add_argument('--frequency', action='store', dest='frequency', type=int,
                         help='frequency of records in msec, if include-time is true (default: 1000)', default=1000)
    _parser.set_defaults(include_time=False)

    args = _parser.parse_args()
    checkArgs(args)

    if args.num_files == 1:
        f = open(args.filename, 'w')
        deviceId = "%s%d" % (args.device_prefix, args.device_first)
        writeFile(f, deviceId, args)
        f.close()
    else:
        for i in range(args.num_files):
            f = open("%s.%d" % (args.filename, i+1), 'w')
            deviceId = "%s%d" % (args.device_prefix, args.device_first + i)
            writeFile(f, deviceId, args)
            f.close()
